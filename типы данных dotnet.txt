						Типы данны DOT+NET
С# Является полностью языком ООП, что польностью исключает любую возможность процедурного подхода т.е. без класса
невозможно объявить переменную и написать функцию, эта объектноориенированность также отражается на типах данных
Абсолютно все типы даннывх в c# унаследованы от object
Все типы данных в с# можно поделить на 2 класса
1-значимые типы ValueTyeps, которые хранят 1 значение определенного типа в ясыке с++ такие типы называют примитивные
значимывые типпа непросредственно хранят значение, к значенным относятся такие типы как bool, int, double итд. 
хранят значение в памяти 
2- Ссылочные типы RefrenceTypes хранят ссылку на значение в динамической памяти, к ссылочным типам относятся абсолютно все 
классы и структуры.
У каждого примитивного типа есть класс обертка, который хранит хар-ки этого типа данных
В языке c#  для всех целочисленных типов отсутсвует unsigned, а беззнаковые типы обозначаются другм спецификатором


В языке c# существует 3 вещественных типа: float,double,decimal


bool занимает 1 байт логический типа данных true or false в отличии от с++ числовые типы неявно не преобразуются в bool

char занимает 2 байта и хранит 1 единственный символ в кодировке Unicode 
Если при помощи си подобной формы записи невозможно преобразовать типы явным образом - 
используется класс convert, который может преобразовать любой встроенный тип в другой

                          Рекурсия 

Рекурсией называется ситуация при которой функция вызывает сама себя, непосредственно или через другую функцию.
Рекурсия также как и циклы используются для организации повторяющихся действий и большинство задач в 
проиграмировании можно решить как рекурсивно так и итерационно(цикл), но некоторые задачи удобнее решать рекурсивно,
а некоторые итерационно, рекурсивные решения более удобны и компактны синтасически, но хуже с точки зрения 
ресурсозатратности, по скольку ресурсы затрачиваются на каждый вызов функции, а именно ресурсы стэка, по скольку
именно в стэке сохраняется состояние вызывающей функции и именно черех стэк передаются параметры в вызываемую функцию.
Стэк не является бесконечным и имеет свойство заканчиваться в этом случае возникает исключительная ситуация
Stack Overflow Exception, что приводит к аварийному завершению программы с потерей данных.
Стэк(стопка)-это модель памяти,из которой последний записанный элемент считывается первым
у стэка есть дно и вершина. дно(1 записанный элемент) и вершина(последний записанный элемент)количество элементов
в стэке называют его высотой.
ТЕ в отличии от цикла рекурсция не может быть бесконечной
	
Также как и в циклах в рекурсивных функциях должно быть условия продолжения или завершения рекурсии
Это первое о чем мы должны подумать при написании рекурсивной функции 
Для того чтоб дойти до условия завершения рекурсии при каждом рекурсивном вызове должен имзеняться хотябы 1 передаваемый параметр
При рекурсии очень важную роль играет: не прототип не реализацияы, а именн данный конекретный вызов функци и очень
важно отличать один вызов функции от другого вызова той же функции




